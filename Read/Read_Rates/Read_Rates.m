%% The Function reads the Rates from the Rate Coefficients Files generated by CoarseAIR
%
%  Input Global Var: - Temp.TNowChar
%                    - Syst.HDF5_File
%
function Read_Rates()    

    %%==============================================================================================================
    % 
    % Coarse-Grained method for Quasi-Classical Trajectories (CG-QCT) 
    % 
    % Copyright (C) 2018 Simone Venturi and Bruno Lopez (University of Illinois at Urbana-Champaign). 
    %
    % Based on "VVTC" (Vectorized Variable stepsize Trajectory Code) by David Schwenke (NASA Ames Research Center). 
    % 
    % This program is free software; you can redistribute it and/or modify it under the terms of the 
    % Version 2.1 GNU Lesser General Public License as published by the Free Software Foundation. 
    % 
    % This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
    % without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    % See the GNU Lesser General Public License for more details. 
    % 
    % You should have received a copy of the GNU Lesser General Public License along with this library; 
    % if not, write to the Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA 
    % 
    %---------------------------------------------------------------------------------------------------------------
    %%==============================================================================================================
    
    global Input Rates Syst Temp OtherSyst OtherRates
  
    
    fprintf('= Read_Rates =========================== T = %i K\n', Temp.TNow)
    fprintf('====================================================\n')
    
    
    if (isempty(OtherSyst))
        OtherSyst(1).Syst = Syst;
    end
    
    
    fprintf('Reading Rates \n\n' )
    Rates = Read_RatesLocal(Rates, Syst, OtherSyst(1).Syst, 1);    
    
    
    if (Syst.NAtoms == 3)


        fprintf(strcat('Computing Overall Rates \n') )
        Rates.T(Temp.iT).Molecule(1).Overall(:,1) = Rates.T(Temp.iT).Diss(:,1);
        Rates.T(Temp.iT).Molecule(1).Overall(:,2) = sum( (Rates.T(Temp.iT).Inel - diag(diag(Rates.T(Temp.iT).Inel))), 2);
        for iExch = 1:size(Syst.ExchToMol,1)
            Rates.T(Temp.iT).Molecule(1).Overall(:,2+iExch) = sum( (Rates.T(Temp.iT).ExchType(iExch).Exch), 2);
        end
        
        
            
%         iMol = 2;
%         for iSyst = 1:length(Input.Kin.ReadOtherSyst)
%             if (Input.Kin.ReadOtherSyst(iSyst))
%                 fprintf(['Loading Rates also for the ', OtherSyst(iSyst).Syst.NameLong, ' System \n\n'] )
% 
%                 OtherRates(iSyst).Rates.Diss = 0.0;
%                 OtherRates(iSyst).Rates      = Read_RatesLocal(OtherRates(iSyst).Rates, OtherSyst(iSyst).Syst, Syst, iSyst+1);
% 
%                 if (Syst.NAtoms == 3)
%                     Rates.T(Temp.iT).Molecule(iMol).Overall(:,1) = OtherRates(iSyst).Rates.T(Temp.iT).Diss(:,1);
%                     for iExch = 1:size(OtherSyst(iSyst).Syst.ExchToMol,1)
%                         Rates.T(Temp.iT).Molecule(iMol).Overall(:,2+iExch) = sum( OtherRates(iSyst).Rates.T(Temp.iT).ExchType(iExch).Exch, 2);
%                     end
%                 end
% 
%             end
%             iMol = iMol+1;
%         end
        

        
    end
           
        
    fprintf('====================================================\n\n')  
    
end


function [Rates] = Read_RatesLocal(Rates, Syst, OtherSyst, iSyst)

    global Input Temp

    if (Syst.NAtoms == 3)
        
        iMol    = Syst.Pair(1).ToMol;
        iNBins  = Syst.Molecule(iMol).EqNStatesIn;
    
        Rates.T(Temp.iT).Diss                 = zeros(iNBins, 4);
        Rates.T(Temp.iT).Inel                 = zeros(iNBins, iNBins);
        for iExch = 1:size(Syst.ExchToMol,1)
            kMol    = Syst.ExchToMol(iExch,1);
            kNBins  = Syst.Molecule(kMol).EqNStatesIn;
            Rates.T(Temp.iT).ExchType(iExch).Exch = zeros(iNBins, kNBins);
        end
        
    else

        iMol    = Syst.Pair(1).ToMol;
        jMol    = Syst.Pair(6).ToMol;
        iNBins  = Syst.Molecule(iMol).EqNStatesIn;
        jNBins  = Syst.Molecule(jMol).EqNStatesIn;    

        Rates.T(Temp.iT).Diss                 = zeros(iNBins, jNBins, 4);
        Rates.T(Temp.iT).DissInel             = zeros(iNBins, jNBins, iNBins, Syst.NMolecules+6);
        Rates.T(Temp.iT).Inel                 = zeros(iNBins, jNBins, iNBins, jNBins);
        for iExch = 1:size(Syst.ExchToMol,1)
            kMol    = Syst.ExchToMol(iExch,1);
            lMol    = Syst.ExchToMol(iExch,2);
            kNBins  = Syst.Molecule(kMol).EqNStatesIn;
            lNBins  = Syst.Molecule(lMol).EqNStatesIn; 
            Rates.T(Temp.iT).ExchType(iExch).Exch = zeros(iNBins, jNBins, kNBins, lNBins);
        end
        
    end

    
    if strcmp(Input.Kin.MolResolutionIn(1,:), 'StS')

        if strcmp(Input.Kin.RateSource, 'HDF5')

            [Rates] = Read_Rates_FromHDF5(Rates, Syst, OtherSyst, iSyst);

        elseif strcmp(Input.Kin.RateSource, 'PLATO')

            [Rates] = Read_Rates_FromPLATO(Rates, Syst, OtherSyst);

        elseif strcmp(Input.Kin.RateSource, 'CoarseAIR')

            [Rates] = Read_Rates_FromCoarseAIR(Rates, Syst, OtherSyst);

        elseif strcmp(Input.Kin.RateSource, 'CG-QCT')

            [Rates] = Read_Rates_FromCGQCT(Rates, Syst, OtherSyst);

        end
    
        
    else
        
        if strcmp(Input.Kin.RateSource, 'HDF5')

            [Rates] = Read_Rates_FromHDF5(Rates, Syst, OtherSyst, iSyst);

        elseif strcmp(Input.Kin.RateSource, 'PLATO')

            RatesFldr = strcat(Input.Paths.ToKinMainFldr, '/database/kinetics/', Syst.NameLong, Input.RunSuffix, '/T', Temp.TNowChar, 'K/');  
            [Rates]   = Read_Rates_FromPLATO(Rates, Syst, RatesFldr);  
        
        end
        
    end

    
     if (Input.Kin.DissCorrFactor ~= 1)
        fprintf(['Correcting Dissociation Rates by a Factor: ' num2str(Input.Kin.DissCorrFactor) '\n'] )
        Rates.T(Temp.iT).Diss = Rates.T(Temp.iT).Diss .* Input.Kin.DissCorrFactor;
        if (Input.Kin.ReadRatesProc(1, 1) == 2)
            fprintf(['Correcting Recombination Rates by a Factor: ' num2str(Input.Kin.DissCorrFactor) '\n'] )
            Rates.T(Temp.iT).Recomb = Rates.T(Temp.iT).Recomb .* Input.Kin.DissCorrFactor;           
        end
     end
    
    
end